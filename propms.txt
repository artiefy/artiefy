esta es mi proyecto app web educatica con 3 tipos de usuarios profesores estudiantes 
y admins pero empezar a hacer el crud en el page.tsx de profofesores 
con el sistema de subida de archvos para las imagenes 
de portadas de los cursos y los videos de las clases de 
los cursos y en el page.tsx de estudiantes la pagina principal de los cursos
disponibles con rutas dinamicas de los id de cursos en el boton ver mas

~ Next.js 15, Clerk, Tailwind CSS, shadcn/ui, Drizzle ORM, PostgreSQL, Neon, Vercel y TypeScript. 
aws s3 para almacenamiento de archivos

ðŸ“¦src
 â”£ ðŸ“‚app
 â”ƒ â”£ ðŸ“‚api
 â”ƒ â”ƒ â”— ðŸ“‚upload
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œroute.ts
 â”ƒ â”£ ðŸ“‚dashboard
 â”ƒ â”ƒ â”£ ðŸ“‚admin
 â”ƒ â”ƒ â”ƒ â”£ ðŸ“œChangeRole.tsx
 â”ƒ â”ƒ â”ƒ â”£ ðŸ“œpage.tsx
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œSearchUsers.tsx
 â”ƒ â”ƒ â”£ ðŸ“‚estudiantes
 â”ƒ â”ƒ â”ƒ â”£ ðŸ“‚cursos
 â”ƒ â”ƒ â”ƒ â”ƒ â”— ðŸ“‚[id]
 â”ƒ â”ƒ â”ƒ â”ƒ â”ƒ â”— ðŸ“œpage.tsx
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œpage.tsx
 â”ƒ â”ƒ â”— ðŸ“‚profesores
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œpage.tsx
 â”ƒ â”£ ðŸ“‚sign-in
 â”ƒ â”ƒ â”— ðŸ“‚[[...sign-in]]
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œpage.tsx
 â”ƒ â”£ ðŸ“‚sign-up
 â”ƒ â”ƒ â”— ðŸ“‚[[...sign-up]]
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œpage.tsx
 â”ƒ â”£ ðŸ“‚unauthorized
 â”ƒ â”ƒ â”— ðŸ“œpage.tsx
 â”ƒ â”£ ðŸ“‚user-profile
 â”ƒ â”ƒ â”— ðŸ“‚[[...user-profile]]
 â”ƒ â”ƒ â”ƒ â”— ðŸ“œpage.tsx
 â”ƒ â”£ ðŸ“œlayout.tsx
 â”ƒ â”£ ðŸ“œloading.tsx
 â”ƒ â”£ ðŸ“œnot-found.tsx
 â”ƒ â”— ðŸ“œpage.tsx
 â”£ ðŸ“‚components
 â”ƒ â”£ ðŸ“‚layout
 â”ƒ â”ƒ â”— ðŸ“œHeader.tsx
 â”ƒ â”— ðŸ“‚ui
 â”ƒ â”ƒ â”£ ðŸ“œalert.tsx
 â”ƒ â”ƒ â”£ ðŸ“œaspect-ratio.tsx
 â”ƒ â”ƒ â”£ ðŸ“œbutton.tsx
 â”ƒ â”ƒ â”£ ðŸ“œcard.tsx
 â”ƒ â”ƒ â”£ ðŸ“œinput.tsx
 â”ƒ â”ƒ â”£ ðŸ“œlabel.tsx
 â”ƒ â”ƒ â”— ðŸ“œprogress.tsx
 â”£ ðŸ“‚hooks
 â”ƒ â”— ðŸ“œuse-mobile.tsx
 â”£ ðŸ“‚lib
 â”ƒ â”— ðŸ“œutils.ts
 â”£ ðŸ“‚models
 â”ƒ â”— ðŸ“œcourseModels.ts
 â”£ ðŸ“‚server
 â”ƒ â”£ ðŸ“‚actions
 â”ƒ â”ƒ â”— ðŸ“œ_actions.ts
 â”ƒ â”£ ðŸ“‚db
 â”ƒ â”ƒ â”£ ðŸ“œindex.ts
 â”ƒ â”ƒ â”— ðŸ“œschema.ts
 â”ƒ â”£ ðŸ“‚queries
 â”ƒ â”ƒ â”— ðŸ“œqueries.ts
 â”ƒ â”— ðŸ“‚wrappers
 â”ƒ â”ƒ â”— ðŸ“œserverWrappers.ts
 â”£ ðŸ“‚styles
 â”ƒ â”— ðŸ“œglobals.css
 â”£ ðŸ“‚types
 â”ƒ â”— ðŸ“œglobals.d.ts
 â”£ ðŸ“‚utils
 â”ƒ â”— ðŸ“œroles.ts
 â”£ ðŸ“œenv.js
 â”— ðŸ“œmiddleware.ts
#01142B #3AF4EF #00BDD8

//src\server\db\schema.ts
import { relations } from "drizzle-orm";
import {
  pgTable,
  serial,
  text,
  timestamp,
  varchar,
  boolean,
  integer,
} from "drizzle-orm/pg-core";

// Tabla de usuarios (con soporte para Clerk)
export const users = pgTable("users", {
  id: text("id").primaryKey(), // Usando el ID de Clerk como clave primaria
  role: text("role").notNull().default("estudiante"), // Rol del usuario (estudiante/profesor, etc.)
  name: text("name"), // Nombre opcional del usuario
  email: text("email").notNull(), // Email obligatorio
  createdAt: timestamp("created_at").defaultNow().notNull(), // Fecha de creaciÃ³n
  updatedAt: timestamp("updated_at").defaultNow().notNull(), // Fecha de Ãºltima actualizaciÃ³n
});

// Tabla de cursos
export const courses = pgTable("courses", {
  id: serial("id").primaryKey(), // ID autoincremental del curso
  title: varchar("title", { length: 255 }).notNull(), // TÃ­tulo del curso
  description: text("description"), // DescripciÃ³n del curso
  coverImageKey: text("cover_image_key"), // Clave de la imagen en S3
  createdAt: timestamp("created_at").defaultNow().notNull(), // Fecha de creaciÃ³n
  updatedAt: timestamp("updated_at").defaultNow().notNull(), // Fecha de Ãºltima actualizaciÃ³n
  creatorId: text("creator_id")
    .references(() => users.id)
    .notNull(), // Referencia al creador del curso (usuario existente)
});

// Tabla de lecciones
export const lessons = pgTable("lessons", {
  id: serial("id").primaryKey(), // ID autoincremental de la lecciÃ³n
  title: varchar("title", { length: 255 }).notNull(), // TÃ­tulo de la lecciÃ³n
  content: text("content"), // Contenido de la lecciÃ³n
  order: integer("order").notNull(), // Orden de la lecciÃ³n en el curso
  courseId: integer("course_id")
    .references(() => courses.id)
    .notNull(), // RelaciÃ³n con la tabla cursos
  createdAt: timestamp("created_at").defaultNow().notNull(), // Fecha de creaciÃ³n
  updatedAt: timestamp("updated_at").defaultNow().notNull(), // Fecha de Ãºltima actualizaciÃ³n
});

// Tabla de inscripciones (relaciÃ³n muchos a muchos entre usuarios y cursos)
export const enrollments = pgTable("enrollments", {
  id: serial("id").primaryKey(), // ID autoincremental de la inscripciÃ³n
  userId: text("user_id")
    .references(() => users.id)
    .notNull(), // RelaciÃ³n con usuarios
  courseId: integer("course_id")
    .references(() => courses.id)
    .notNull(), // RelaciÃ³n con cursos
  enrolledAt: timestamp("enrolled_at").defaultNow().notNull(), // Fecha de inscripciÃ³n
  completed: boolean("completed").default(false), // Estado de completado
});

// Relaciones
export const usersRelations = relations(users, ({ many }) => ({
  enrollments: many(enrollments), // RelaciÃ³n con inscripciones
  createdCourses: many(courses), // RelaciÃ³n con cursos creados
}));

export const coursesRelations = relations(courses, ({ many, one }) => ({
  lessons: many(lessons), // RelaciÃ³n con lecciones
  enrollments: many(enrollments), // RelaciÃ³n con inscripciones
  creator: one(users, {
    fields: [courses.creatorId], // Campo que referencia al creador
    references: [users.id], // ID del creador en usuarios
  }),
}));

export const lessonsRelations = relations(lessons, ({ one }) => ({
  course: one(courses, {
    fields: [lessons.courseId], // Campo que referencia al curso
    references: [courses.id], // ID del curso
  }),
}));

export const enrollmentsRelations = relations(enrollments, ({ one }) => ({
  user: one(users, {
    fields: [enrollments.userId], // Campo que referencia al usuario
    references: [users.id], // ID del usuario
  }),
  course: one(courses, {
    fields: [enrollments.courseId], // Campo que referencia al curso
    references: [courses.id], // ID del curso
  }),
}));

//src\server\db\index.ts
import { neon } from "@neondatabase/serverless";
import { config } from "dotenv";
import { drizzle } from "drizzle-orm/neon-http";

import * as schema from "./schema";

// Carga variables de entorno desde .env o .env.local
config({ path: ".env" });

// Inicializa la conexiÃ³n a Neon usando la URL de la base de datos
const sql = neon(process.env.DATABASE_URL!);

// Exporta la conexiÃ³n Drizzle para usarla en otros lugares del proyecto
export const db = drizzle(sql, { schema });

// src/models/courseModels.ts
import { db } from "~/server/db/index";
import { courses, lessons } from "~/server/db/schema";
import { eq } from "drizzle-orm";

// Crear un nuevo curso
export const createCourse = async (title: string, description: string, creatorId: string, coverImageKey: string) => {
  const result = await db.insert(courses).values({
    title,
    description,
    creatorId,
    coverImageKey,
  });
  return result;
};

// Obtener todos los cursos
export const getAllCourses = async () => {
  const result = await db.select().from(courses);
  return result;
};

// Obtener un curso por ID
export const getCourseById = async (courseId: number) => {
  const result = await db.select().from(courses).where(eq(courses.id, courseId));
  return result;
};

// Actualizar un curso
export const updateCourse = async (courseId: number, title: string, description: string, coverImageKey: string) => {
  const result = await db.update(courses).set({ title, description, coverImageKey }).where(eq(courses.id, courseId));
  return result;
};

// Eliminar un curso
export const deleteCourse = async (courseId: number) => {
  await db.delete(courses).where(eq(courses.id, courseId));
  await db.delete(lessons).where(eq(lessons.courseId, courseId)); // Eliminar lecciones asociadas
};

//src\app\dashboard\estudiantes\page.tsx
import { auth } from '@clerk/nextjs/server'
import { redirect } from "next/navigation"
import Image from "next/image"
import Link from "next/link"
import { db } from "~/server/db"
import { courses } from "~/server/db/schema"
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "~/components/ui/card"
import { Button } from "~/components/ui/button"
import { AspectRatio } from "~/components/ui/aspect-ratio"

async function getCourses() {
  return await db.select().from(courses)
}

export default async function StudentDashboardPage() {
  const { userId }: { userId: string | null } = await auth()
  
  if (!userId) {
    redirect("/sign-in")
  }

  const allCourses = await getCourses()

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold mb-6">Cursos Disponibles</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {allCourses.map((course) => (
          <Card key={course.id} className="overflow-hidden">
            <CardHeader className="p-0">
              <AspectRatio ratio={16 / 9}>
                <Image
                  src={`${process.env.NEXT_PUBLIC_AWS_S3_URL}/${course.coverImageKey}`}
                  alt={course.title}
                  fill
                  className="object-cover"
                  sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                />
              </AspectRatio>
            </CardHeader>
            <CardContent className="p-4">
              <CardTitle className="text-xl mb-2">{course.title}</CardTitle>
              <p className="text-sm text-gray-600 line-clamp-2">{course.description}</p>
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full">
                <Link href={`/dashboard/cursos/${course.id}`}>Ver Detalles</Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  )
}


//src\app\api\upload\route.ts
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
import { createPresignedPost } from '@aws-sdk/s3-presigned-post'
import { S3Client } from '@aws-sdk/client-s3'
import { v4 as uuidv4 } from 'uuid'

export async function POST(request: Request) {
  const { filename, contentType } = await request.json()

  try {
    const client = new S3Client({ region: process.env.AWS_REGION })
    if (!process.env.AWS_BUCKET_NAME) {
      throw new Error('AWS_BUCKET_NAME is not defined');
    }
    const { url, fields } = await createPresignedPost(client, {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: uuidv4(),
      Conditions: [
        ['content-length-range', 0, 10485760], // up to 10 MB
        ['starts-with', '$Content-Type', contentType],
      ],
      Fields: {
        acl: 'public-read',
        'Content-Type': contentType,
      },
      Expires: 600, // Seconds before the presigned post expires. 3600 by default.
    })

    return Response.json({ url, fields })
  } catch (error) {
    return Response.json({ error: (error as Error).message })
  }
}

"use client";
import { SignInButton, SignedIn, SignedOut, useUser } from "@clerk/nextjs";
import Link from "next/link";
import { Header } from "~/components/layout/Header";
import { Button } from "~/components/ui/button";

export default function Home() {
  const { user } = useUser();

  // Determinar la ruta del dashboard segÃºn el rol del usuario
  const dashboardRoute =
    user?.publicMetadata?.role === "admin"
      ? "/dashboard/admin"
      : user?.publicMetadata?.role === "profesor"
      ? "/dashboard/profesores"
      : "/dashboard/estudiantes"; // Ruta predeterminada para usuarios sin rol o estudiantes

  return (
    <div className="flex min-h-screen flex-col">
      <Header />
      <main className="flex flex-grow items-center justify-center">
        <section className="container mx-auto px-4 py-16 text-center">
          <h1 className="mb-7 text-5xl font-bold">
            Ãšnete a nosotros y transforma tus ideas en
            <br /> realidades con el poder del conocimiento
          </h1>
          <p className="mb-7 text-xl">
            Bienvenido a Artiefy, tu plataforma digital educativa dedicada a
            impulsar <br /> tus proyectos con conocimientos de tecnologÃ­a e
            innovaciÃ³n
          </p>
          <div>
            <SignedOut>
              <SignInButton>
                <Button className="p-7 text-2xl font-semibold active:scale-95">
                  COMIENZA YA
                </Button>
              </SignInButton>
            </SignedOut>
            <SignedIn>
              <Button
                asChild
                className="p-7 text-2xl font-semibold active:scale-95"
              >
                <Link href={dashboardRoute}>DASHBOARD</Link>
              </Button>
            </SignedIn>
          </div>
        </section>
      </main>
    </div>
  );
}


