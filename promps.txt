// Tabla de lecciones
export const lessons = pgTable('lessons', {
	id: serial('id').primaryKey(),
	title: varchar('title', { length: 255 }).notNull(),
	description: text('description'),
	duration: integer('duration').notNull(),
	coverImageKey: text('cover_image_key').notNull(),
	coverVideoKey: text('cover_video_key').notNull(),
	order: serial('order').notNull(),
	courseId: integer('course_id')
		.references(() => courses.id)
		.notNull(),
	createdAt: timestamp('created_at').defaultNow().notNull(),
	updatedAt: timestamp('updated_at').defaultNow().notNull(),
	resourceKey: text('resource_key').notNull(),
	lastUpdated: timestamp('last_updated').defaultNow().notNull(),
});

// Tabla de tipos de actividades
export const typeActi = pgTable('type_acti', {
	id: serial('id').primaryKey(),
	name: varchar('name', { length: 255 }).notNull(),
	description: text('description'),
});

// Tabla de actividades
export const activities = pgTable('activities', {
	id: serial('id').primaryKey(),
	name: varchar('name', { length: 255 }).notNull(),
	description: text('description'),
	typeid: integer('type_id')
		.references(() => typeActi.id)
		.notNull(),
	lessonsId: integer('lessons_id')
		.references(() => lessons.id)
		.notNull(),
	lastUpdated: timestamp('last_updated').defaultNow().notNull(),
});

// Tabla de progreso de lecciones por usuario
export const userLessonsProgress = pgTable('user_lessons_progress', {
	userId: text('user_id')
		.references(() => users.id)
		.notNull(),
	lessonId: integer('lesson_id')
		.references(() => lessons.id)
		.notNull(),
	progress: real('progress').default(0).notNull(),
	isCompleted: boolean('is_completed').default(false).notNull(),
	isLocked: boolean('is_locked').default(true),
	lastUpdated: timestamp('last_updated').defaultNow().notNull(),
});

// Tabla de progreso de actividades por usuario
export const userActivitiesProgress = pgTable('user_activities_progress', {
	userId: text('user_id')
		.references(() => users.id)
		.notNull(),
	activityId: integer('activity_id')
		.references(() => activities.id)
		.notNull(),
	progress: real('progress').default(0).notNull(),
	isCompleted: boolean('is_completed').default(false).notNull(),
	lastUpdated: timestamp('last_updated').defaultNow().notNull(),
});

"use client"
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import NProgress from 'nprogress';
import { FaRobot } from 'react-icons/fa';
import ChatBot from '~/components/estudiantes/layout/ChatBot';
import Footer from '~/components/estudiantes/layout/Footer';
import { Header } from '~/components/estudiantes/layout/Header';
import { useToast } from '~/hooks/use-toast';
import { unlockNextLesson } from '~/server/actions/lessons/unlockNextLesson';
import { completeActivity } from '~/server/actions/progress/completeActivity';
import { updateLessonProgress } from '~/server/actions/progress/updateLessonProgress';
import {
  type Activity,
  type UserLessonsProgress,
  type Lesson,
  type Course,
  type LessonWithProgress,
} from '~/types';
import LessonNavigation from '~/components/estudiantes/layout/LessonNavigation';
import LessonCards from '~/components/estudiantes/layout/LessonCards';
import LessonPlayer from '~/components/estudiantes/layout/LessonPlayer';
import LessonActivities from '~/components/estudiantes/layout/LessonActivities';


export default function LessonDetails({
  lesson,
  activity,
  course,
  lessons,
  userLessonsProgress,
}: {
  lesson: LessonWithProgress;
  activity: Activity | null;
  lessons: Lesson[];
  course: Course;
  userLessonsProgress: UserLessonsProgress[];
}) {
  // State and hooks initialization
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [selectedLessonId, setSelectedLessonId] = useState<number | null>(lesson.id);
  const [progress, setProgress] = useState(lesson.porcentajecompletado);
  const [isVideoCompleted, setIsVideoCompleted] = useState(lesson.porcentajecompletado === 100);
  const [isActivityCompleted, setIsActivityCompleted] = useState(activity?.isCompleted ?? false);
  const [isCompletingActivity, setIsCompletingActivity] = useState(false);
  const [lessonsState, setLessonsState] = useState<LessonWithProgress[]>([]);
  const router = useRouter();
  const searchParams = useSearchParams();
  const { toast } = useToast();

  // Initialize lessons state with progress and locked status
  useEffect(() => {
    const initializeLessonsState = () => {
      const lessonsWithProgress = lessons
        .map((lessonItem) => {
          const progress = userLessonsProgress.find((progress) => progress.lessonId === lessonItem.id);
          return {
            ...lessonItem,
            isLocked: progress ? (progress.isLocked ?? true) : true,
          };
        })
        .sort((a, b) => a.order - b.order);
      setLessonsState(lessonsWithProgress);
    };

    initializeLessonsState();
  }, [lessons, userLessonsProgress]);

  // Handle lesson navigation
  useEffect(() => {
    if (selectedLessonId !== null && selectedLessonId !== lesson.id) {
      NProgress.start();
      setProgress(0);
      setIsVideoCompleted(false);
      setIsActivityCompleted(false);
      router.push(`/estudiantes/clases/${selectedLessonId}`);
    }
  }, [selectedLessonId, lesson.id, router]);

  // Ensure initial lesson loading is complete
  useEffect(() => {
    NProgress.done();
  }, [searchParams]);

  // Ensure the first lesson is always active and unlocked
  useEffect(() => {
    setLessonsState((prevLessons) =>
      prevLessons.map((l) =>
        l.order === 1
          ? {
              ...l,
              isLocked: false,
              porcentajecompletado: l.porcentajecompletado,
              isCompleted: l.porcentajecompletado === 100,
            }
          : l
      )
    );
  }, []);

  // Set initial progress and video completion state based on lesson data
  useEffect(() => {
    setProgress(lesson.porcentajecompletado);
    setIsVideoCompleted(lesson.porcentajecompletado === 100);
    setIsActivityCompleted(activity?.isCompleted ?? false);
  }, [lesson, activity]);

  // Redirect if the lesson is locked and not the first lesson
  useEffect(() => {
    if (lesson.isLocked && lesson.order !== 1) {
      toast({
        title: 'Lección bloqueada',
        description: 'Esta lección está bloqueada. Completa las lecciones anteriores para desbloquearla.',
        variant: 'destructive',
      });

      const timeoutId = setTimeout(() => {
        router.push('/estudiantes');
      }, 3000);

      return () => clearTimeout(timeoutId);
    }
  }, [lesson.isLocked, lesson.order, router, toast]);
 // Handle video end event
  const handleVideoEnd = async () => {
    setProgress(100);
    setIsVideoCompleted(true);
    try {
      await updateLessonProgress(lesson.id, 100);
      setLessonsState((prevLessons) =>
        prevLessons.map((l) =>
          l.id === lesson.id
            ? {
                ...l,
                porcentajecompletado: 100,
                isCompleted: activity ? false : true,
                isLocked: false,
              }
            : l
        )
      );
      toast({
        title: 'Video Completado',
        description: activity ? 'Ahora completa la actividad para desbloquear la siguiente clase' : 'Has completado la clase',
        variant: 'default',
      });

      // Unlock next lesson if no activity
      if (!activity) {
        const result = await unlockNextLesson(lesson.id);
        if (result.success && 'nextLessonId' in result) {
          toast({
            title: 'Clase Completada',
            description: '¡Avanzando a la siguiente clase!',
            variant: 'default',
          });

          // Navigate to next lesson
          setTimeout(() => {
            setProgress(0);
            setSelectedLessonId(result.nextLessonId ?? null);
            router.push(`/estudiantes/clases/${result.nextLessonId}`);
          }, 1500);
        }
      }
    } catch (error) {
      console.error('Error al actualizar el progreso de la lección:', error);
      toast({
        title: 'Error',
        description: 'No se pudo actualizar el progreso de la lección.',
        variant: 'destructive',
      });
    }
  };

  // Handle progress update event
  const handleProgressUpdate = async (videoProgress: number): Promise<void> => {
    const roundedProgress = Math.round(videoProgress);
    if (roundedProgress > progress && roundedProgress < 100) {
      setProgress(roundedProgress);
      try {
        await updateLessonProgress(lesson.id, roundedProgress);
        setLessonsState((prevLessons) =>
          prevLessons.map((l) =>
            l.id === lesson.id ? { ...l, porcentajecompletado: roundedProgress } : l
          )
        );
      } catch (error) {
        console.error('Error al actualizar el progreso de la lección:', error);
      }
    }
  };

  // Handle activity completion event
  const handleActivityCompletion = async () => {
    if (!activity || !isVideoCompleted) return;

    setIsCompletingActivity(true);

    try {
      await completeActivity(activity.id);
      setIsActivityCompleted(true);
      setLessonsState((prevLessons) =>
        prevLessons.map((l) =>
          l.id === lesson.id ? { ...l, isCompleted: true } : l
        )
      );

      const result = await unlockNextLesson(lesson.id);
      if (result.success && 'nextLessonId' in result) {
        toast({
          title: 'Clase Completada',
          description: '¡Avanzando a la siguiente clase!',
          variant: 'default',
        });

        // Navigate to next lesson
        setTimeout(() => {
          setProgress(0);
          setSelectedLessonId(result.nextLessonId ?? null);
          router.push(`/estudiantes/clases/${result.nextLessonId}`);
        }, 1500);
      }
    } catch (error) {
      console.error('Error al completar la actividad:', error);
      toast({
        title: 'Error',
        description: 'No se pudo completar la actividad.',
        variant: 'destructive',
      });
    } finally {
      setIsCompletingActivity(false);
    }
  };

  // Add new effect to handle URL-based lesson unlocking
  useEffect(() => {
    setLessonsState((prevLessons) =>
      prevLessons.map((l) => ({
        ...l,
        isLocked:
          l.order === 1
            ? false
            : l.id === lesson.id
            ? false
            : l.porcentajecompletado > 0
            ? false
            : l.isCompleted
            ? false
            : l.isLocked,
      }))
    );
  }, [lesson.id]);

  // Function to handle navigation
  const handleNavigation = (direction: 'prev' | 'next') => {
    const sortedLessons = [...lessonsState].sort((a, b) => a.order - b.order);
    const currentIndex = sortedLessons.findIndex((l) => l.id === selectedLessonId);
 if (direction === 'prev') {
      for (let i = currentIndex - 1; i >= 0; i--) {
        const prevLesson = sortedLessons[i];
        if (prevLesson && !prevLesson.isLocked) {
          setProgress(0);
          setSelectedLessonId(prevLesson.id);
          router.push(`/estudiantes/clases/${prevLesson.id}`);
          break;
        }
      }
    } else if (direction === 'next') {
      for (let i = currentIndex + 1; i < sortedLessons.length; i++) {
        const nextLesson = sortedLessons[i];
        if (nextLesson && !nextLesson.isLocked) {
          setProgress(0);
          setSelectedLessonId(nextLesson.id);
          router.push(`/estudiantes/clases/${nextLesson.id}`);
          break;
        }
      }
    }
  };

  return (
    <>
      <Header />
      <div className="bg-background flex min-h-screen flex-col">
        <div className="flex flex-1 px-4 py-6">
          {/* Left Sidebar */}
          <div className="bg-background w-80 p-4 shadow-lg">
            <h2 className="text-primary mb-4 text-2xl font-bold">Cursos</h2>
            <LessonCards
              lessonsState={lessonsState}
              selectedLessonId={selectedLessonId}
              setSelectedLessonId={setSelectedLessonId}
              course={course}
            />
          </div>

          {/* Main Content */}
          <div className="flex-1 p-6">
            <LessonNavigation
              handleNavigation={handleNavigation}
              lessonsState={lessonsState}
              lessonOrder={lesson.order}
            />
            <LessonPlayer
              lesson={lesson}
              progress={progress}
              handleVideoEnd={handleVideoEnd}
              handleProgressUpdate={handleProgressUpdate}
            />
          </div>

          {/* Right Sidebar - Activities */}
          <LessonActivities
            activity={activity}
            isVideoCompleted={isVideoCompleted}
            isActivityCompleted={isActivityCompleted}
            isCompletingActivity={isCompletingActivity}
            handleActivityCompletion={handleActivityCompletion}
          />

          {/* Chatbot Button and Modal */}
          <button
            onClick={() => setIsChatOpen(!isChatOpen)}
            className="fixed bottom-6 right-6 rounded-full bg-blue-500 p-4 text-white shadow-lg transition-colors hover:bg-blue-600"
          >
            <FaRobot className="text-xl" />
          </button>

          <ChatBot />
        </div>
        <Footer />
      </div>
    </>
  );
}
src\app\estudiantes\clases\[id]\LessonDetails.tsx

import { notFound } from 'next/navigation';
import { getCourseById } from '~/server/actions/courses/getCourseById';
import { getLessonById } from '~/server/actions/lessons/getLessonById';
import { getLessonsByCourseId } from '~/server/actions/lessons/getLessonsByCourseId';
import { getUserLessonsProgress } from '~/server/actions/progress/getUserLessonsProgress';
import type {
	Activity,
	Lesson,
	Course,
	UserLessonsProgress,
	LessonWithProgress,
} from '~/types';
import LessonDetails from './LessonDetails';

interface Params {
	id: string;
}

interface Props {
	params: Promise<Params>;
}

export default async function LessonPage({ params }: Props) {
	const { id } = await params;
	return await LessonContent({ id });
}

async function LessonContent({ id }: { id: string }) {
	try {
		const lessonId = Number.parseInt(id, 10);
		if (isNaN(lessonId)) {
			notFound();
		}

		const lessonData: Lesson | null = await getLessonById(lessonId);
		if (!lessonData) {
			console.log('Lección no encontrada');
			notFound();
		}

		const lesson: LessonWithProgress = {
			...lessonData,
			isLocked: lessonData.isLocked ?? false,
		};

		const activity: Activity | null = lesson.activities?.[0]
			? {
					...lesson.activities[0],
					isCompleted: lesson.activities[0].isCompleted ?? false,
					userProgress: lesson.activities[0].userProgress ?? 0,
				}
			: null;

		const course: Course | null = await getCourseById(lesson.courseId);
		if (!course) {
			console.log('Curso no encontrado');
			notFound();
		}

		const lessons: Lesson[] = await getLessonsByCourseId(lesson.courseId);
		const userLessonsProgress: UserLessonsProgress[] =
			await getUserLessonsProgress(course.creatorId);

		return (
			<LessonDetails
				lesson={lesson}
				activity={activity}
				lessons={lessons}
				course={course}
				userLessonsProgress={userLessonsProgress}
			/>
		);
	} catch (error) {
		console.error(
			'Error al obtener los datos de la lección:',
			error instanceof Error ? error.message : String(error)
		);
		notFound();
	}
}
src\app\estudiantes\clases\[id]\page.tsx

import { FaCheckCircle, FaLock } from 'react-icons/fa';
import { Button } from '~/components/estudiantes/ui/button';
import { Icons } from '~/components/estudiantes/ui/icons';
import { type Activity } from '~/types';

interface LessonActivitiesProps {
	activity: Activity | null;
	isVideoCompleted: boolean;
	isActivityCompleted: boolean;
	isCompletingActivity: boolean;
	handleActivityCompletion: () => void;
}

const LessonActivities = ({
	activity,
	isVideoCompleted,
	isActivityCompleted,
	isCompletingActivity,
	handleActivityCompletion,
}: LessonActivitiesProps) => {
	return (
		<div className="w-72 bg-background p-4 shadow-lg">
			<h2 className="mb-4 text-2xl font-bold text-primary">Actividades</h2>
			{activity ? (
				<div className="rounded-lg border border-gray-200 bg-gray-50 p-4">
					<div className="flex items-center justify-between">
						<div>
							<h3 className="font-semibold text-gray-900">{activity.name}</h3>
						</div>
						{isActivityCompleted ? (
							<FaCheckCircle className="text-green-500" />
						) : (
							<FaLock className="text-gray-400" />
						)}
					</div>
					<p className="mt-2 text-sm text-gray-600">{activity.description}</p>
					<Button
						onClick={handleActivityCompletion}
						disabled={
							!isVideoCompleted || isActivityCompleted || isCompletingActivity
						}
						className={`mt-4 w-full ${
							isVideoCompleted
								? 'bg-[#00BDD8] text-white hover:bg-[#00A5C0]'
								: 'bg-gray-400 text-background'
						}`}
					>
						{isCompletingActivity ? (
							<Icons.spinner className="mr-2 text-background" />
						) : isActivityCompleted ? (
							'Actividad Completada'
						) : isVideoCompleted ? (
							'Completar Actividad'
						) : (
							'Ver video primero'
						)}
					</Button>
				</div>
			) : (
				<p className="text-gray-600">No hay actividades disponibles</p>
			)}
		</div>
	);
};

export default LessonActivities;
src\components\estudiantes\layout\LessonActivities.tsx

entonces tengo estos 3 archivos las tablas y las relacionescon las actividades y las clases y todo el progreso se hace individual por user id, quiero que en el sidebar derecho donde estan las actividades salgan un boton link que diga ver actividad al darle al boton ver actividad salga un modal de la actividad id que este relacionada con type act id con esa clase al terminar la actividad ahora si se activa el boton completar actividad y ya podra seguir ala siguiente clase, las actividades los educadores las crean con los datos guardados en uptash, como haria yo como estudaintes poder ver las actividades que los educadores crean en la base de datos con los datos en uptash y que pueda ver mas de una actividad por clase?
