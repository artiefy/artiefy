'use server';

import { currentUser } from '@clerk/nextjs/server';
import { db } from '~/server/db';
import { users, courses } from '~/server/db/schema';

import type { Course } from '~/types';

// Crear un curso
export async function createCourse(
    courseDetails: Omit<Course, 'id' | 'createdAt' | 'updatedAt'>
): Promise<{ success: boolean; message: string }> {
    const user = await currentUser();

    if (!user?.id) {
        throw new Error('Usuario no autenticado');
    }

    const userId = user.id;

    try {
        // Verificar si el usuario existe
        const existingUser = await db.query.users.findFirst({
            where: eq(users.id, userId),
        });

        // Si el usuario no existe, crearlo con rol de 'admin'
        if (!existingUser) {
            if (user.fullName && user.emailAddresses[0]?.emailAddress) {
                await db.insert(users).values({
                    id: userId,
                    role: 'admin',
                    name: user.fullName,
                    email: user.emailAddresses[0].emailAddress,
                    createdAt: new Date(),
                    updatedAt: new Date(),
                    phone: user.phoneNumbers[0]?.phoneNumber || null,
                    country: user.country || null,
                    city: user.city || null,
                    address: user.address || null,
                    age: user.age || null,
                    birthDate: user.birthDate || null,
                });
            } else {
                throw new Error('Informaci√≥n del usuario incompleta');
            }
        } else {
            // Si el usuario existe, actualizar su rol a 'admin' si no lo es
            if (existingUser.role !== 'admin') {
                await db.update(users)
                    .set({ role: 'admin', updatedAt: new Date() })
                    .where(eq(users.id, userId));
            }
        }

        // Crear el curso
        const [newCourse] = await db
            .insert(courses)
            .values({
                ...courseDetails,
                creatorId: userId,
                createdAt: new Date(),
                updatedAt: new Date(),
            })
            .returning();

        if (!newCourse) {
            return { success: false, message: 'Error al crear el curso' };
        }

        return { success: true, message: 'Curso creado exitosamente' };
    } catch (error: unknown) {
        console.error('Error al crear el curso:', error);
        if (error instanceof Error) {
            return {
                success: false,
                message: `Error al crear el curso: ${error.message}`,
            };
        } else {
            return {
                success: false,
                message: 'Error desconocido al crear el curso',
            };
        }
    }
}

//server actions crear cursos
